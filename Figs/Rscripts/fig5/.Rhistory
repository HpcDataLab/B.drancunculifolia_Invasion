a <- 1
b <- 2
print(a+b)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Users/ulises/Desktop/baccharis5m"
wait <- FALSE
run <- FALSE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
occ_ind <- "Sp_ind.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation"
# Most of the variables used here as arguments were already created for the previous functions
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
library(kuenm)
library(parallel)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
sessionInfo()
rm(large_df, large_list, large_vector, temp_variables)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Users/ulises/Desktop/baccharis5m"
wait <- FALSE
run <- FALSE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
occ_ind <- "Sp_ind.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation"
# Most of the variables used here as arguments were already created for the previous functions
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
library(kuenm)
library(parallel)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
Sys.setenv('R_MAX_VSIZE'=320000000000)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
seq(2, 6, 1), 8, 10)
library(kuenm)
seq(2, 6, 1), 8, 10)
c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
help(kuenm_cal)
help(kuenm_ceval)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- FALSE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
occ_ind <- "Sp_ind.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation"
# Most of the variables used here as arguments were already created for the previous functions
fin_eval <- kuenm_feval(path = mod_dir, occ.joint = occ_joint, occ.ind = occ_ind, replicates = replicates,
out.eval = out_feval, threshold = threshold, rand.percent = rand_percent,
iterations = iterations, parallel.proc = paral_proc)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- FALSE
kuenm_cal(occ.joint = occ_joint, occ.tra = occ_tra, M.var.dir = M_var_dir, batch = batch_cal,
out.dir = out_dir, reg.mult = reg_mult, f.clas = f_clas, args = args,
maxent.path = maxent_path, wait = wait, run = run)
library(kuenm)
library(parallel)
setwd("/Volumes/DATALacie/baccharis")
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- FALSE
kuenm_cal(occ.joint = occ_joint, occ.tra = occ_tra, M.var.dir = M_var_dir, batch = batch_cal,
out.dir = out_dir, reg.mult = reg_mult, f.clas = f_clas, args = args,
maxent.path = maxent_path, wait = wait, run = run)
setwd("~/Documents/GitHub/SouthInvassion/Figs/Rscripts/fig5")
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/wc2.1_30s_bio/", pattern='.tif$', all.files=TRUE, full.names=FALSE)
rastlist <- mixedsort(rastlist)
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/wc2.1_30s_bio/", pattern='.tif$', all.files=TRUE, full.names=FALSE)
rastlist
rastlist <- list.files(path = "~/Documents/GitHub/SouthInvassion/Figs/Rscripts/fig5", pattern='.tif$', all.files=TRUE, full.names=FALSE)
rastlist
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
cal_eval <- kuenm_ceval(path = out_dir, occ.joint = occ_joint, occ.tra = occ_tra, occ.test = occ_test,
batch = batch_cal, out.eval = out_eval, threshold = threshold,
rand.percent = rand_percent, iterations = iterations, kept = kept,
selection = selection, parallel.proc = paral_proc)
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
cal_eval <- kuenm_ceval(path = out_dir, occ.joint = occ_joint, occ.tra = occ_tra, occ.test = occ_test,
batch = batch_cal, out.eval = out_eval, threshold = threshold,
rand.percent = rand_percent, iterations = iterations, kept = kept,
selection = selection, parallel.proc = paral_proc)
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
