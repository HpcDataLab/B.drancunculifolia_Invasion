a <- 1
b <- 2
print(a+b)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Users/ulises/Desktop/baccharis5m"
wait <- FALSE
run <- FALSE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
occ_ind <- "Sp_ind.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation"
# Most of the variables used here as arguments were already created for the previous functions
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
library(kuenm)
library(parallel)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
sessionInfo()
rm(large_df, large_list, large_vector, temp_variables)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Users/ulises/Desktop/baccharis5m"
wait <- FALSE
run <- FALSE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- FALSE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
occ_ind <- "Sp_ind.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation"
# Most of the variables used here as arguments were already created for the previous functions
is_swd <- FALSE
sets_var <- c("set1")
out_mop <- "MOP_results"
percent <- 10
paral <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Some of the variables used here as arguments were already created for the previous functions
library(kuenm)
library(parallel)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
Sys.setenv('R_MAX_VSIZE'=320000000000)
kuenm_mmop(G.var.dir = G_var_dir, M.var.dir = M_var_dir, is.swd = is_swd,
sets.var = sets_var, out.mop = out_mop, percent = percent, parallel = paral)
# Author: Ulises Olivares
# uolivares@unam.mx
# July 06, 2021
library(raster)
library(ggplot2)
library(rasterExtras)
#library(spocc)
#library(occ)
library(dplyr)
library(RSpatial)
library(dismo)
library(gtools)
################################
# Import DATA from CSV file
#IMAC path
setwd("/Users/ulises/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/3. Data/GBIF")
#Macbook pro path
#setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/3. Data/GBIF")
fileName <-"baccharis2021.csv"
bacc <- read.csv(fileName, sep="\t")
location <- data.frame(bacc$species, bacc$decimalLongitude, bacc$decimalLatitude)
print(paste("Total registers:", nrow(location)))
#Remove registers with NA
cleanLoc <- na.omit(location)
names(cleanLoc) <- c("species", "longitude", "latitude")
print(paste("Registers with location:", nrow(cleanLoc)))
#free mem
rm(location)
rm(bacc)
#Remove duplicated registers
dups <- duplicated(cleanLoc[c("longitude", "latitude")])
uniqueLoc <- cleanLoc[!dups, ]
cat(nrow(cleanLoc) - nrow(uniqueLoc), "records are removed")
print(paste("Unique registers:", nrow(uniqueLoc)))
# 1 degree = 16 miles
ext <- extent(min(uniqueLoc$longitude), max(uniqueLoc$longitude), min(uniqueLoc$latitude), max(uniqueLoc$latitude))
setwd("/Volumes/DATALacie/worldclim/wc2.1_30s_bio/")
## Import worldclim data
# Read all rasters from worldclim
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/wc2.1_30s_bio/", pattern='.tif$', all.files=TRUE, full.names=FALSE)
rastlist <- mixedsort(rastlist)
# Stack all rasters
bio <- stack(rastlist)
# Croping rasters
bioVars <- crop(bio, ext)
# Transform to dataframe
bioVars_df <- as.data.frame(bioVars, xy=TRUE)# for ploting
names(bioVars_df) <- c("x", "y", "bio1", "bio2", "bio3", "bio4", "bio5", "bio6", "bio7", "bio8", "bio9", "bio10",
"bio11", "bio12", "bio13", "bio14", "bio15", "bio16", "bio17", "bio18", "bio19")
# -------------------------------------------------
# 4. Getting new layers: Elevation, aspect and slope
# -------------------------------------------------
### Elevation
# IMAC
setwd("/Volumes/DATALacie/worldclim/elevation")
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/elevation", pattern='.tif$', all.files=TRUE, full.names=FALSE)
dem <- raster(rastlist)
# Crop raster to interest area
dem <- crop(dem, ext)
dem_df<- as.data.frame(dem)
names(dem_df) <- c("elevation")
### Calculate slope and aspect from elevation
# Calculate and export slope
slope <-  terrain(dem, opt= 'slope', unit='tangent', neighbors=8)
slope_df <- as.data.frame(slope)
names(slope_df) <- c("slope")
#writeRaster(slope, "slope", format = "ascii", overwrite=TRUE)
# Calculate and export aspect
aspect <- terrain(dem, opt='aspect', unit='degrees', neighbors=8)
aspect_df <- as.data.frame(aspect)
names(aspect_df) <- c("aspect")
#writeRaster(aspect, "aspect", format = "ascii", overwrite=TRUE)
# Joint all variables
bioVars_df$dem <- dem_df
bioVars_df$slope <- slope_df
bioVars_df$aspect <- aspect_df
names(bioVars_df) <- (c("x", "y", "bio1", "bio2", "bio3", "bio4", "bio5", "bio6", "bio7", "bio8", "bio9", "bio10",
"bio11", "bio12", "bio13", "bio14", "bio15", "bio16", "bio17", "bio18", "bio19",
"elevation", "slope", "aspect"))
# ------------------------------------------------------------------
# 5. Correlation of environmental variables, dem, slope and aspect
# ------------------------------------------------------------------
#install.packages("ggpubr")
#install.packages("Hmisc")
#install.packages("ggcorrplot")
#install.packages("caret")
#install.packages("IDPmisc") # remove NA nad NaN
library(Hmisc)
library(ggpubr)
library(corrplot)
library(IDPmisc)
library(RColorBrewer)
library(ggcorrplot)
library(caret)
# Drop all rows with NA
allVars <- na.omit(bioVars_df[3:24])
#Drop all rows with NA, NaN -inf, inf, etc.
allVars <- NaRV.omit(allVars)
# Calculate pearson correlation
correlation <- cor(allVars, method = c("pearson"))
# Select highly correlated variables
cutoff <- findCorrelation(correlation, cutoff = 0.8, verbose = TRUE, exact=TRUE, names = TRUE)
finalVars<- sort(cutoff)
finalbioclimCut<- allVars[finalVars]
print(finalVars)
# Generate plot
#corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color", type="upper")
#corrplot.mixed(correlation, order = "hclust", hclust.method = "average", upper = "color", lower = "number", tl.pos = "lt")
corPlot <- ggcorrplot(correlation, hc.order=TRUE, lab=TRUE, type = "upper", color = c("#FC4E07", "white", "#00AFBB"))
setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/Rscripts/fig3")
ggsave(corPlot, filename = "correlation.tiff", device = "tiff", dpi = 600, width = 9, height = 9)
corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color", type="upper")
corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
library(heatmaply)
heatmaply_cor(correlation)
# Author: Ulises Olivares
# uolivares@unam.mx
# July 06, 2021
library(raster)
library(ggplot2)
library(rasterExtras)
#library(spocc)
#library(occ)
library(dplyr)
library(RSpatial)
library(dismo)
library(gtools)
################################
# Import DATA from CSV file
#IMAC path
setwd("/Users/ulises/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/3. Data/GBIF")
#Macbook pro path
#setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/3. Data/GBIF")
fileName <-"baccharis2021.csv"
bacc <- read.csv(fileName, sep="\t")
location <- data.frame(bacc$species, bacc$decimalLongitude, bacc$decimalLatitude)
print(paste("Total registers:", nrow(location)))
#Remove registers with NA
cleanLoc <- na.omit(location)
names(cleanLoc) <- c("species", "longitude", "latitude")
print(paste("Registers with location:", nrow(cleanLoc)))
#free mem
rm(location)
rm(bacc)
#Remove duplicated registers
dups <- duplicated(cleanLoc[c("longitude", "latitude")])
uniqueLoc <- cleanLoc[!dups, ]
cat(nrow(cleanLoc) - nrow(uniqueLoc), "records are removed")
print(paste("Unique registers:", nrow(uniqueLoc)))
# 1 degree = 16 miles
ext <- extent(min(uniqueLoc$longitude), max(uniqueLoc$longitude), min(uniqueLoc$latitude), max(uniqueLoc$latitude))
setwd("/Volumes/DATALacie/worldclim/wc2.1_30s_BIO/")
## Import worldclim data
# Read all rasters from worldclim
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/wc2.1_30s_BIO/", pattern='.tif$', all.files=TRUE, full.names=FALSE)
rastlist <- mixedsort(rastlist)
# Stack all rasters
BIO <- stack(rastlist)
# Croping rasters
BIOVars <- crop(BIO, ext)
# Transform to dataframe
BIOVars_df <- as.data.frame(BIOVars, xy=TRUE)# for ploting
names(BIOVars_df) <- c("x", "y", "BIO1", "BIO2", "BIO3", "BIO4", "BIO5", "BIO6", "BIO7", "BIO8", "BIO9", "BIO10",
"BIO11", "BIO12", "BIO13", "BIO14", "BIO15", "BIO16", "BIO17", "BIO18", "BIO19")
# -------------------------------------------------
# 4. Getting new layers: Elevation, aspect and slope
# -------------------------------------------------
### Elevation
# IMAC
setwd("/Volumes/DATALacie/worldclim/elevation")
rastlist <- list.files(path = "/Volumes/DATALacie/worldclim/elevation", pattern='.tif$', all.files=TRUE, full.names=FALSE)
dem <- raster(rastlist)
# Crop raster to interest area
dem <- crop(dem, ext)
dem_df<- as.data.frame(dem)
names(dem_df) <- c("elevation")
### Calculate slope and aspect from elevation
# Calculate and export slope
slope <-  terrain(dem, opt= 'slope', unit='tangent', neighbors=8)
slope_df <- as.data.frame(slope)
names(slope_df) <- c("slope")
#writeRaster(slope, "slope", format = "ascii", overwrite=TRUE)
# Calculate and export aspect
aspect <- terrain(dem, opt='aspect', unit='degrees', neighbors=8)
aspect_df <- as.data.frame(aspect)
names(aspect_df) <- c("aspect")
#writeRaster(aspect, "aspect", format = "ascii", overwrite=TRUE)
# Joint all variables
BIOVars_df$dem <- dem_df
BIOVars_df$slope <- slope_df
BIOVars_df$aspect <- aspect_df
names(BIOVars_df) <- (c("x", "y", "BIO1", "BIO2", "BIO3", "BIO4", "BIO5", "BIO6", "BIO7", "BIO8", "BIO9", "BIO10",
"BIO11", "BIO12", "BIO13", "BIO14", "BIO15", "BIO16", "BIO17", "BIO18", "BIO19",
"elevation", "slope", "aspect"))
# ------------------------------------------------------------------
# 5. Correlation of environmental variables, dem, slope and aspect
# ------------------------------------------------------------------
#install.packages("ggpubr")
#install.packages("Hmisc")
#install.packages("ggcorrplot")
#install.packages("caret")
#install.packages("IDPmisc") # remove NA nad NaN
library(Hmisc)
library(ggpubr)
library(corrplot)
library(IDPmisc)
library(RColorBrewer)
library(ggcorrplot)
library(caret)
library(heatmaply)
# Drop all rows with NA
allVars <- na.omit(BIOVars_df[3:24])
#Drop all rows with NA, NaN -inf, inf, etc.
allVars <- NaRV.omit(allVars)
# Calculate pearson correlation
correlation <- cor(allVars, method = c("pearson"))
# Select highly correlated variables
cutoff <- findCorrelation(correlation, cutoff = 0.8, verbose = TRUE, exact=TRUE, names = TRUE)
finalVars<- sort(cutoff)
finalBIOclimCut<- allVars[finalVars]
print(finalVars)
# Generate plot
#corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color", type="upper")
#corrplot.mixed(correlation, order = "hclust", hclust.method = "average", upper = "color", lower = "number", tl.pos = "lt")
corPlot <- ggcorrplot(correlation, hc.order=TRUE, lab=TRUE, type = "upper", color = c("#FC4E07", "white", "#00AFBB"))
setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/Rscripts/fig3")
ggsave(corPlot, filename = "correlation.tiff", device = "tiff", dpi = 600, width = 9, height = 9)
corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
heatmaply_cor(correlation)
heatmaply_cor(correlation)
heatmaply_cor(correlation)
corPlot2 <- corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
ggsave(corPlot2, filename = "correlation2.tiff", device = "tiff", dpi = 600, width = 16, height = 9)
dev.off()
tiff(file = "heatmap2", units="in", width=9, height=9, res=600)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
dev.off()
corPlot3 <- heatmaply_cor(correlation)
setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/Rscripts/fig3")
tiff(file = "heatmap2", units="in", width=16, height=9, res=600)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
dev.off()
dev.off()
dev.off()
ggsave(corPlot2, filename = "correlation2.tiff", device = "tiff", dpi = 600, width = 16, height = 9)
ggsave(corPlot2, filename = "correlation2.tiff", device = "tiff", dpi = 600, width = 16, height = 9)
corPlot2 <- corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
ggsave(corPlot2, filename = "correlation2.tiff", device = "tiff", dpi = 600, width = 16, height = 9)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
tiff(file = "heatmap2", units="in", width=16, height=9, res=600)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
# xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
tiff(file = "~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/Rscripts/fig3/heatmap2", units="in", width=16, height=9, res=600)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
# xlab = "Variables",
#ylab = "Variables",
k_col = 5,
k_row = 5
)
dev.off()
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
node_type = "scatter",
point_size_mat = -log10(correlation),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
node_type = "scatter",
point_size_mat = -log10(correlation),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#node_type = "scatter",
point_size_mat = -log10(correlation),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
#rcorrelation <- rcorr(allVars)
heatmaply_cor(
correlation,
#node_type = "scatter",
#point_size_mat = -log10(correlation),
#point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
ggcorrplot(correlation, hc.order=TRUE, lab=TRUE, type = "upper", color = c("#FC4E07", "white", "#00AFBB"))
ggcorrplot(correlation, hc.order=TRUE, lab=TRUE, type = "upper", color = c("#FC4E07", "white", "#00AFBB"))
corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
corrplot(correlation, order = "hclust", hclust.method = "average", insig="p-value", sig.level = -1, addrect = 10, tl.cex = 0.7, tl.col = "black", method = "color")
