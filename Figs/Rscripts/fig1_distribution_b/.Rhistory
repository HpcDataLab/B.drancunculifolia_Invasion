library(ggpubr)
devtools::install_github("kassambara/ggpubr")
library(ggpubr)
library(ggpubr)
library(ggpubr)
library(kuenm)
library(parallel)
setwd("/Volumes/DATALacie/baccharis")
library(kuenm)
library(parallel)
setwd("/Volumes/DATALacie/baccharis")
# Filename for the MD file
file_name <- "all_procs"
kuenm_start(file.name = file_name)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "YOUR/DIRECTORY"
wait <- FALSE
run <- TRUE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- TRUE
wait1 <- TRUE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- TRUE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- TRUE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- TRUE
wait1 <- TRUE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = TEargs, wait = wait1, run = run1)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- TRUE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- TRUE
wait1 <- TRUE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = TEargs, wait = wait1, run = run1)
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = TEargs, wait = wait1, run = run1)
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = TEargs, wait = wait1, run = run1)
# Installing and loading packages
if(!require(devtools)){
install.packages("devtools")
}
if(!require(kuenm)){
devtools::install_github("marlonecobos/kuenm")
}
library(kuenm)
library(parallel)
setwd("/Volumes/DATALacie/baccharis")
# Filename for the MD file
file_name <- "all_procs"
kuenm_start(file.name = file_name)
occ_joint <- "Sp_joint.csv"
occ_tra <- "Sp_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
args <- NULL
maxent_path <- "/Volumes/DATALacie/baccharis"
wait <- FALSE
run <- TRUE
occ_test <- "Sp_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
paral_proc <- FALSE # make this true to perform MOP calculations in parallel, recommended
# only if a powerfull computer is used (see function's help)
# Note, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models"
mod_dir <- "Final_Models"
rep_n <- 10
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "logistic"
project <- TRUE
G_var_dir <- "G_variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- TRUE
wait1 <- TRUE
run1 <- FALSE
args <- NULL
# Again, some of the variables used here as arguments were already created for the previous functions
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin,
rep.n = rep_n, rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir,
out.format = out_format, project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp, maxent.path = maxent_path,
args = args, wait = wait1, run = run1)
orca(fig, file = fileName, width=3 * dpi, height = 3 * dpi, scale = 18, parallel_limit = 4, verbose = 2, timeout=100000) %>%
config(toImageButtonOptions = list(format = 'svg'))
library(dplyr)
# Author: Ulises Olivares
# uolivares@unammx
# Jun 28, 2021
library(raster)
library(plotly)
library(dplyr)
# Set working dir and import data
setwd("~/OneDrive - UNAM/0. UNAM - Juriquilla/4. COLABORACIONES/6. Geraldo/Rscripts/fig1_distribution")
fileCropped <- "Sp_cropped.csv"
fileComplete <- "Sp_all.csv"
############################################
# Immport and proces CSV with all registers
############################################
baccharisComplete <- read.csv(fileComplete, sep="\t")
# Reduce registers
location <- data.frame(baccharisComplete$species, baccharisComplete$decimalLongitude, baccharisComplete$decimalLatitude)
print(paste("Total registers:", nrow(location)))
baccharisComplete <- read.csv(fileComplete)
#Remove registers with NA
cleanLoc <- na.omit(location)
names(cleanLoc) <- c("species", "longitude", "latitude")
print(paste("Registers with location:", nrow(cleanLoc)))
#free mem
rm(location)
rm(bacc)
#Remove duplicated registers
dups <- duplicated(cleanLoc[c("longitude", "latitude")])
baccharisUnique <- cleanLoc[!dups, ]
cat(nrow(cleanLoc) - nrow(baccharisUnique), "records are removed")
print(paste("Unique registers:", nrow(baccharisUnique)))
# Finished complete registers
############################################
############################################
# Immport and proces CSV with cropped regs
############################################
# Import Cropped registers
baccharisCropped <- read.csv(fileCropped)
print(paste("Successfully imported", nrow(baccharisComplete), "records"))
# Finished cropped registers
############################################
# Generate plot using plotly
fig <- quakes
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~baccharisUnique$latitude,
lon = ~baccharisUnique$longitude,
coloraxis = 'coloraxis',
radius = 4)
fig <- fig %>%
layout(
mapbox = list(
style='stamen-terrain',
center= list(lat=-20.928, lon=-56.70), zoom=3.5), coloraxis = list(colorscale = 'Viridis'))
fig <- fig %>%
config(toImageButtonOptions = list(format = 'jpeg'))
fileName <- 'baccaris.jpeg'
dpi <- 300
orca(fig, file = fileName, width=3 * dpi, height = 3 * dpi, scale = 18, parallel_limit = 4, verbose = 2, timeout=100000) %>%
config(toImageButtonOptions = list(format = 'svg'))
fig
# Generate plot using plotly
"""fig <- quakes
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~baccharisUnique$latitude,
lon = ~baccharisUnique$longitude,
coloraxis = 'coloraxis',
radius = 4)
fig <- fig %>%
layout(
mapbox = list(
style='stamen-terrain',
center= list(lat=-20.928, lon=-56.70), zoom=3.5), coloraxis = list(colorscale = 'Viridis'))
fig <- fig %>%
config(toImageButtonOptions = list(format = 'jpeg'))
fileName <- 'baccaris.jpeg'
dpi <- 300
orca(fig, file = fileName, width=3 * dpi, height = 3 * dpi, scale = 18, parallel_limit = 4, verbose = 2, timeout=100000) %>%
config(toImageButtonOptions = list(format = 'svg'))
fig"""
# Generate plot using plotly
"""fig <- quakes
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~baccharisUnique$latitude,
lon = ~baccharisUnique$longitude,
coloraxis = 'coloraxis',
radius = 4)
fig <- fig %>%
layout(
mapbox = list(
style='stamen-terrain',
center= list(lat=-20.928, lon=-56.70), zoom=3.5), coloraxis = list(colorscale = 'Viridis'))
fig <- fig %>%
config(toImageButtonOptions = list(format = 'jpeg'))
fileName <- 'baccaris.jpeg'
dpi <- 300
orca(fig, file = fileName, width=3 * dpi, height = 3 * dpi, scale = 18, parallel_limit = 4, verbose = 2, timeout=100000) %>%
config(toImageButtonOptions = list(format = 'svg'))
fig"""
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3.5, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
library(ggplot2)
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3.5, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
library(ggmap)
install.packages("ggmap")
library(ggmap)
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3.5, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3.5, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3.5, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lat=-20.928, lon=-56.70), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c( lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c( lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c( lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
?register_google
showing_key()
google_key()
register_google(key="[AIzaSyAonLIX7cpphScWUYgXlhnA83l2AvaPojo]")
ggmap(ph_basemap)
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c( lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
############################################
# Generate MAP
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
register_google(key="AIzaSyBNfXNd_dAjsCZGo8N07dGP7_zRDcw0V6A")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
register_google(key="AIzaSyBNfXNd_dAjsCZGo8N07dGP7_zRDcw0V6A", write = TRUE)
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color =
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
google_key()
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
google_key()
devtools::install_github("dkahle/ggmap")
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
############################################
ph_basemap <- get_map(location=c(lon=-56.70, lat=-20.928), zoom=3, maptype = 'terrain-background', source = 'stamen')
ggmap(ph_basemap)
houston = c(lon = -95.36, lat = 29.76)
houston.map = get_map(location = houston, zoom = 8, color = "bw")
map <- list()
source = "google"
map$base <- get_map("New York City", source=source)
map$roadmap <- get_map("New York City",maptype='roadmap', source=source)
map$hybird <- get_map("New York City",maptype='hybrid', source=source)
map$satellite <- get_map("New York City",maptype='satellite', source=source)
map$terrain <- get_map("New York City",maptype='terrain', source=source)
devtools::install_github("dkahle/ggmap")
